include: e2e-tests/.gitlab-ci.yml

image: "$CI_REGISTRY/linbit/linbit-admin-backend/test-image"

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_PIPELINE_SOURCE == 'api'

stages:
  - check
  - e2e

# Use cargo to test the project
test:cargo:
  stage: check
  needs: []
  variables:
    RUSTFLAGS: "-C instrument-coverage"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --locked -- -Z unstable-options --format json | cargo2junit > results.xml
    - grcov . --binary-path ./target/debug/ -s . -t cobertura --branch --ignore-not-existing --ignore "*cargo*" -o coverage.xml
    - grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "*cargo*" -o coverage.lcov
    - lcov --summary coverage.lcov
  artifacts:
    reports:
      junit:
        - results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/lines\.*: \d+\.\d+%/'

test:rustfmt:
  stage: check
  needs: []
  script:
    - cargo fmt -- --version && cargo fmt -- --print-config current .
    - cargo fmt -- --check

test:compat:
  stage: check
  needs: []
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/.cargo
  parallel:
    matrix:
      # current 'cargo msrv':
      - IMAGE: rust:1.70
  image: $IMAGE
  script:
    - cargo check
  cache:
    key: $CI_JOB_NAME
    paths:
      - .cargo

test:clippy:
  stage: check
  image: $LINBIT_DOCKER_REGISTRY/rust/clippy2codeclimate
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/.cargo
  script:
    - cargo clippy --no-deps --all-features --message-format=json | clippy2codeclimate codequality.json
  artifacts:
    reports:
      codequality:
        - codequality.json
  cache:
    key: $CI_JOB_NAME
    paths:
      - .cargo

test:sbom:
  stage: check
  image: $LINBIT_DOCKER_REGISTRY/rust/cargo-sbom
  script:
  - make sbom/drbd-reactor.cdx.json
  artifacts:
    paths:
    - sbom/*.json

test:cve:
  stage: check
  needs:
  - job: test:sbom
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [ "" ]
  script:
    - trivy --version
    - trivy -q sbom --exit-code 0 --format template --template "@/contrib/html.tpl" -o cve-scan.html sbom/*.json
    # Prints full report
    - trivy -q sbom --exit-code 0 sbom/*.json
    # Fail on critical (unfixed) vulnerabilities
    - trivy -q sbom --exit-code 1 --ignore-unfixed --severity CRITICAL sbom/*.json
  artifacts:
    when: always
    expose_as: "CVE Scan"
    paths:
      - cve-scan.html
